#include<stdio.h>
#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    bool executed;
};

void sortByPriority(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

void calculateTimes(struct Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;

        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("Process\t Arrival Time\t Burst Time\t Priority\t Completion Time\t Turnaround Time\t Waiting Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\t\t\t %d\t\t\t %d\n", processes[i].process_id,
               processes[i].arrival_time, processes[i].burst_time, processes[i].priority,
               processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time = %.2f\n", (float)total_turnaround_time / n);
    printf("Average Waiting Time = %.2f\n", (float)total_waiting_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d:\n", processes[i].process_id);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_burst_time = processes[i].burst_time;
        processes[i].executed = false;
    }

    int current_time = 0;
    int completed_processes = 0;

    while (completed_processes < n) {
        int highest_priority = -1;
        int highest_priority_index = -1;

        for (int i = 0; i < n; i++) {
            if (!processes[i].executed && processes[i].arrival_time <= current_time) {
                if (highest_priority == -1 || processes[i].priority < highest_priority) {
                    highest_priority = processes[i].priority;
                    highest_priority_index = i;
                }
            }
        }

        if (highest_priority_index != -1) {
            processes[highest_priority_index].remaining_burst_time--;

            if (processes[highest_priority_index].remaining_burst_time == 0) {
                processes[highest_priority_index].completion_time = current_time + 1;
                processes[highest_priority_index].executed = true;
                completed_processes++;
            }
        }

        current_time++;
    }

    sortByPriority(processes, n);

    calculateTimes(processes, n);

    return 0;
}
