#include <stdio.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int remaining_burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

int main() {
    int n, time = 0, remaining_processes;
    float total_turnaround_time = 0, total_waiting_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[MAX_PROCESSES];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        printf("Process %d:\n", processes[i].process_id);
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_burst_time = processes[i].burst_time;
    }

    remaining_processes = n;

    printf("\nProcess execution order:\n");

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_burst_time > 0) {
                printf("Executing Process %d for time quantum %d\n", processes[i].process_id, TIME_QUANTUM);

                // Update remaining burst time
                if (processes[i].remaining_burst_time <= TIME_QUANTUM) {
                    time += processes[i].remaining_burst_time;
                    processes[i].remaining_burst_time = 0;
                } else {
                    time += TIME_QUANTUM;
                    processes[i].remaining_burst_time -= TIME_QUANTUM;
                }

                // Update completion time if the process finishes
                if (processes[i].remaining_burst_time == 0) {
                    processes[i].completion_time = time;
                    remaining_processes--;
                }
            }
        }
    }

    printf("\nProcess\t Arrival Time\t Burst Time\t Completion Time\t Turnaround Time\t Waiting Time\n");

    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;

        printf("%d\t\t %d\t\t %d\t\t %d\t\t\t %d\t\t\t %d\n", processes[i].process_id,
               processes[i].arrival_time, processes[i].burst_time, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("\nAverage Turnaround Time = %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time = %.2f\n", total_waiting_time / n);

    return 0;
}
