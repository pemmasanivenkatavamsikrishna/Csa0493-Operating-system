#include <stdio.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int completion_time;
    int is_completed;
};

void calculate_waiting_time(struct Process processes[], int n) {
    int current_time = 0, shortest_burst_index;
    float total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        shortest_burst_index = -1;
        for (int j = 0; j < n; j++) {
            if (!processes[j].is_completed && processes[j].arrival_time <= current_time &&
                (shortest_burst_index == -1 || processes[j].burst_time < processes[shortest_burst_index].burst_time)) {
                shortest_burst_index = j;
            }
        }

        if (shortest_burst_index == -1) {
            current_time++;
            i--;
            continue;
        }

        processes[shortest_burst_index].waiting_time = current_time - processes[shortest_burst_index].arrival_time;
        total_waiting_time += processes[shortest_burst_index].waiting_time;

        current_time += processes[shortest_burst_index].burst_time;
        processes[shortest_burst_index].completion_time = current_time;
        processes[shortest_burst_index].turnaround_time = current_time - processes[shortest_burst_index].arrival_time;
        total_turnaround_time += processes[shortest_burst_index].turnaround_time;

        processes[shortest_burst_index].is_completed = 1;
    }

    printf("Process\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", processes[i].id, processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].is_completed = 0;
    }

    calculate_waiting_time(processes, n);

    return 0;
}
