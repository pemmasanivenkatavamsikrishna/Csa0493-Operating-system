#include <stdio.h>
#include <stdlib.h>

typedef struct Process {
    int pid;
    int priority;
    int burst_time;
    int waiting_time;
    int turnaround_time;
} Process;

void printProcesses(Process *processes, int n) {
    printf("Processes:\n");
    for (int i = 0; i < n; i++) {
        printf("PID: %d, Priority: %d, Burst Time: %d, Waiting Time: %d, Turnaround Time: %d\n",
               processes[i].pid, processes[i].priority, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);
    }
}

int main() {
    Process processes[] = {
        {1, 3, 8, 0, 0},
        {2, 1, 4, 0, 0},
        {3, 4, 6, 0, 0},
        {4, 2, 2, 0, 0}
    };
    int n = sizeof(processes) / sizeof(Process);

    int current_time = 0;
    int completed = 0;
    int waiting_processes = n;

    while (completed < n) {
        int highest_priority = -1;
        int next_process = -1;

        for (int i = 0; i < n; i++) {
            if (processes[i].burst_time > 0 && processes[i].priority > highest_priority) {
                highest_priority = processes[i].priority;
                next_process = i;
            }
        }

        if (next_process != -1) {
            processes[next_process].burst_time--;

            if (processes[next_process].burst_time == 0) {
                processes[next_process].turnaround_time = current_time + 1;
                completed++;
            }
        }

        current_time++;

        for (int i = 0; i < n; i++) {
            if (processes[i].burst_time > 0) {
                processes[i].waiting_time++;
            }
        }
    }

    printProcesses(processes, n);

    return 0;
}
