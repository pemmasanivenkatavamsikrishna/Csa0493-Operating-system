#include <stdio.h>
#include <semaphore.h>
#include <pthread.h>
#include <unistd.h>

sem_t mutex;
int flag = 0;

void *thread_func(void *arg) {
    int tid = *((int *) arg);
    if (tid == 1) {
        sem_wait(&mutex);
        printf("Process 1 is executing the critical section.\n");
        sleep(1);
        flag = 1;
        sem_post(&mutex);
    } else {
        sem_wait(&mutex);
        if (flag == 0) {
            printf("Process 2 is executing the critical section.\n");
            sleep(1);
            flag = 1;
        } else {
            printf("Process 2 is waiting for Process 1 to finish.\n");
            sem_post(&mutex);
            sem_wait(&mutex);
            printf("Process 2 is now executing the critical section.\n");
            sleep(1);
            flag = 0;
        }
        sem_post(&mutex);
    }
    return NULL;
}

int main() {
    pthread_t thread_id[2];
    sem_init(&mutex, 0, 1);

    pthread_create(&thread_id[0], NULL, thread_func, (void *) &thread_id[0]);
    pthread_create(&thread_id[1], NULL, thread_func, (void *) &thread_id[1]);

    pthread_join(thread_id[0], NULL);
    pthread_join(thread_id[1], NULL);

    sem_destroy(&mutex);
    return 0;
}
